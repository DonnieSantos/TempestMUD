public class HashTable

{
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private Link[] buckets;
  private int size;

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public HashTable(int bucketsLength)

  {
    buckets = new Link[bucketsLength];
    size = 0;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public boolean contains(Object O)

  {
    int h = O.hashCode();
    if (h < 0) h = -h;
    h = h % buckets.length;

    Link current = buckets[h];

    while (current != null)

    {
      if (current.data == O) return true;
      current = current.next;
    }

    return false;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public int getValue(Object O)

  {
    int h = O.hashCode();
    if (h < 0) h = -h;
    h = h % buckets.length;

    Link current = buckets[h];

    while (current != null)

    {
      if (current.data.equals(O)) return current.value;
      current = current.next;
    }

    return -1;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public boolean add(Object O, int value)

  {
    int h = O.hashCode();
    if (h < 0) h = -h;
    h = h % buckets.length;

    Link current = buckets[h];

    while (current != null)

    {
      if (current.data.equals(O)) return false;
      current = current.next;
    }

    Link newLink = new Link();
    newLink.data = O;
    newLink.value = value;
    newLink.next = buckets[h];
    buckets[h] = newLink;
    size++;
    return true;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public boolean remove(Object O)

  {
    int h = O.hashCode();
    if (h < 0) h = -h;
    h = h % buckets.length;

    Link current = buckets[h];
    Link previous = null;

    while (current != null)

    {
      if (current.data.equals(O))

      {
        if (previous == null) buckets[h] = current.next;
        else previous.next = current.next;
        size--;
        return true;
      }

      previous = current;
      current = current.next;
    }

    return false;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public void clear()

  {
    for (int i=0; i<buckets.length; i++)
      buckets[i] = null;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public int size()

  {
    return size;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private class Link

  {
    public int value;
    public Object data;
    public Link next;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
}