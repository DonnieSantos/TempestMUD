import java.io.*;
import java.util.*;

class Legend extends MudObject

{
  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  private static final int NUM_VARS = 1;

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  private static final int MARKS  = 0;

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public MudArrayList getMarks()    { return (MudArrayList) vars[MARKS];     }
  public LegendMark getMark(int i)  { return (LegendMark) getMarks().get(i); }

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public Legend(MudObject parent)

  {
    super(parent, NUM_VARS);
    set(Legend.MARKS, new MudArrayList());
  }
  
  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public boolean addMark(MudString mark)

  {
    MudString date = new MudString("Vallum " + SystemTime.getGamedate("vallum") + ".";
    return addMark(mark, date);
  }

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public boolean addMark(MudString mark, MudString date)

  {
    if (getMarks().size() >= MAX_LEGEND_SIZE) return false;

    for (int i=0; i<getMarks().size(); i++)

    {
      if (mark.equalsIgnoreCase(getMark(i).getMark()))
        return updateMark(mark, i, date);

      if (mark.toLowerCase().indexOf("mentored by") == 0)
      if (getMark(i).getMark().toLowerCase().indexOf("mentored by") == 0)
        return overwriteMark(mark, i, date);
    }

    getMarks().add(new LegendMark(this, mark, date, new MudInteger(1)));
    parent.save();
    return true;
  }

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public boolean removeMark(MudString mark)

  {
    mark.assign(makePlain(mark));

    for (int i=0; i<getMarks().size(); i++)
    if (makePlain(getMark(i).getMark()).equals(mark))

    {
      getMarks().remove(i);
      return true;
    }

    return false;
  }

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public boolean updateMark(MudString newMark, int position, MudString date)

  {
    LegendMark updatedMark = getMark(position);

    updatedMark.setMark(newMark);
    updatedMark.setDate(date);

    if (updatedMark.getTimes().lessThan(999))
      updatedMark.setTimes(updatedMark.getTimes().plus(1));

    int last = getMarks().size()-1;

    for (int i=position; i<last; i++)
      getMarks().set(i, getMark(i+1));

    getMarks().set(last, updatedMark);
    parent.save();
    return true;
  }

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public boolean overwriteMark(MudString newMark, int position, MudString date)

  {
    LegendMark updatedMark = getMark(position);

    updatedMark.setMark(newMark);
    updatedMark.setDate(date);

    if (updatedMark.getTimes().lessThan(999))
      updatedMark.setTimes(updatedMark.getTimes().plus(1));

    int last = getMarks().size()-1;

    for (int i=position; i<last; i++)
      getMarks().set(i, getMark(i+1));

    getMarks().set(last, updatedMark);
    parent.save();
    return true;
  }

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////

  public MudString getLegend()

  {
    // REWRITE !!!

    return null;
  }

  ///////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////
}