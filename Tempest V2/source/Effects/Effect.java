import java.io.*;
import java.util.*;

abstract class Effect implements Externalizable, Cloneable

{
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  private static final long serialVersionUID = 3000;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static final int TOTAL_NUM_EFFECTS  =  3;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static final int EFFECT_SANCTUARY   =  0;
  public static final int EFFECT_SHIELD      =  1;
  public static final int EFFECT_POISON      =  2;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  protected int id;
  protected int strength;
  protected int duration;
  protected Object owner;
  protected String name;
  protected String desc;
  protected String sign;
  protected String dmsg;
  protected String wmsg;
  protected String omsg;
  protected boolean permanent;
  protected boolean harmful;
  protected boolean active;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public int getID()             { return id;             }
  public String getName()        { return name;           }
  public String getDesc()        { return desc;           }
  public String getSign()        { return sign;           }
  public int getStrength()       { return strength;       }
  public int getDuration()       { return duration;       }
  public boolean getPermanent()  { return permanent;      }
  public boolean getHarmful()    { return harmful;        }
  public void setOwner(Entity e) { owner = e;             }
  public Entity getEntityOwner() { return (Entity) owner; }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  abstract void init(Object Owner, int Strength, int Duration);
  abstract void dissipate(boolean audible);
  abstract void tick();

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public Effect() { }
  
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////
  
  public Effect replicate()
  
  {
    Effect E = null;
    try { E = (Effect)clone(); }
    catch (Exception e) { System.out.println(e); }
    return E;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static String getEffectName(int effectID)

  {
    switch (effectID)

    {
      case EFFECT_SANCTUARY:  return "Sanctuary";
      case EFFECT_SHIELD:     return "Shield";
      case EFFECT_POISON:     return "Poison";
    }

    return "Unknown";
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void initialize(Object Owner, int Strength, int Duration)

  {
    owner = Owner;
    strength = Strength;
    duration = Duration;

    if (duration == -1) permanent = true;
    else permanent = false;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void initItem(Object Owner, int Strength, int Duration)

  {
    init(Owner, Strength, Duration);
    getEntityOwner().echo(wmsg);
    getEntityOwner().sendToAwake(getEntityOwner().getPName() + omsg);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void decrement()

  {
    if (active) tick();
    if (permanent) return;

    duration--;
    if (duration <= 0) dissipate(true);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void quitDecrement()

  {
    if (permanent) return;
    if (harmful) return;

    duration--;
    if (duration <= 0) dissipate(true);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void writeExternal(ObjectOutput out)

  {
    try

    {
      out.writeObject("STRENGTH");    out.writeObject(new Integer(strength));
      out.writeObject("DURATION");    out.writeObject(new Integer(duration));
      out.writeObject("PERMA");       out.writeObject(new Boolean(permanent));
      out.writeObject("EFFECT END");
    }

    catch (Exception e) { e.printStackTrace(); }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void readExternal(ObjectInput in)

  {
    String tag = "";

    try

    {
      while (!tag.equals("EFFECT END"))

      {
        tag = (String)in.readObject();

        if (tag.equals("STRENGTH"))      strength  = ((Integer)in.readObject()).intValue();
        else if (tag.equals("DURATION")) duration  = ((Integer)in.readObject()).intValue();
        else if (tag.equals("PERMA"))    permanent = ((Boolean)in.readObject()).booleanValue();
        else if (!tag.equals("EFFECT END")) in.readObject();
      }
    }

    catch (Exception e) { e.printStackTrace(); }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static Effect createEffect(String sName, Object OWNER, int STRENGTH, int DURATION)

  {
    Effect E = null;
    Class C = null;

    sName = Utility.getProperClassName(sName);

    try

    {
      C = Class.forName(sName);
      E = (Effect) C.newInstance();
    }

    catch (Exception e) { return null; }
    catch (Throwable t) { return null; }


    try

    {
      E.initialize(OWNER, STRENGTH, DURATION);
      return E;
    }

    catch (Exception e) { return null; }
    catch (Throwable t) { return null; }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////
}