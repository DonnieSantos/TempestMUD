public class Destroy extends Transfer

{
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int item(Item I, Object S, int type)

  {
    int error = -1;

    switch (type)

    {
      case ISAC: error = canSac(I, (Entity)S); break;
      case IUSE: error = canUse(I, (Entity)S); break;
      case IEAT: error = canEat(I, (Entity)S); break;
      case ISELL: error = canSell(I, (Entity)S); break;
      case IPURGE: error = canPurge(I, (Entity)S); break;
      case IDECAYR: error = canDecayRoom(I, (Room)S); break;
      case IDECAYE: error = canDecayEntity(I, (Entity)S); break;
      case IDECAYC: error = canDecayContainer(I, (Item)S); break; 
    }

    if (error == ALL_OK) I.destroy(type);

    return error;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canPurge(Item I, Entity E)

  {
    if (I.getLevel() > E.getLevel()) return ER_ILEVEL;

    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canSac(Item I, Entity E)

  {
    if (I.getLevel() > E.getLevel()) return ER_ILEVEL;

    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canUse(Item I, Entity E)

  {
    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canEat(Item I, Entity E)

  {
    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canDecayEntity(Item I, Entity E)

  {
    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canDecayRoom(Item I, Room RM)

  {
    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canDecayContainer(Item I, Item C)

  {
    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static int canSell(Item I, Entity E)

  {
    if (I.getFlag(Item.FLAG_NO_DROP)) return ER_INODROP;
    if (I.getWorth() <= 0) return ER_INOVALUE;
    if (!I.isEmpty()) return ER_IHASITEMS;

    return ALL_OK;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
}