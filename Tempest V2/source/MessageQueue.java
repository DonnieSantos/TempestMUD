import java.util.*;
import java.io.*;

public class MessageQueue

{
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private LinkedList queue;
  private ArrayList stack;
  private boolean stacking;
  private boolean frozen;

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public void startStacking() { stacking = true; }
  public void stopStacking()  { stackStrings();  }
  public void freeze()        { frozen = true;   }
  public void unfreeze()      { frozen = false;  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public MessageQueue()

  {
    queue = new LinkedList();
    stacking = false;
    stack = new ArrayList();
    frozen = false;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public void putFront(String s)

  {
    if (!frozen)
    queue.addFirst(s);
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public void put(String s)

  {
    if (frozen) return;
    if (stacking) stack.add(s);
    else queue.addLast(s);
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public String get()

  {
    return (String)queue.removeFirst();
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public boolean isEmpty()

  {
    if (queue.size() == 0)
      return true;

    return false;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public void clear()

  {
    queue.clear();
  }
  
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public String flush()

  {
    unfreeze();

    String output = "";

    while (queue.size() > 0)
      output += "\r\n" + get();

    if (output.length() > 0) output.substring(0, output.length()-2);

    return output;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public void stackStrings()

  {
    ArrayList newList = new ArrayList();

    for (int i=0; i<stack.size(); i++)
      if (!newList.contains((String)stack.get(i)))
        newList.add((String)stack.get(i));

    int[] counts = new int[newList.size()];

    for (int i=0; i<stack.size(); i++)
      counts[newList.indexOf((String)stack.get(i))]++;

    stacking = false;

    for (int i=0; i<newList.size(); i++)
      if (counts[i] > 1) put(((String)newList.get(i)) + " (" + counts[i] + ")");
      else put(((String)newList.get(i)));

    stack = new ArrayList();
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
}