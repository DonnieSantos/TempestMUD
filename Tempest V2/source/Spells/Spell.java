import java.io.*;
import java.util.*;

abstract class Spell extends Ability implements Externalizable

{
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  private static final long serialVersionUID = 2000;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static final int SPELL_TYPE_DAMAGE          =  1;
  public static final int SPELL_TYPE_AREADAMAGE      =  2;
  public static final int SPELL_TYPE_EFFECT_HARMFUL  =  3;
  public static final int SPELL_TYPE_EFFECT_HELPFUL  =  4;
  public static final int SPELL_TYPE_HEAL            =  5;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static final int TOTAL_NUM_SPELLS           =  9;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static final int SPELL_GEM_MISSILE          =  0;
  public static final int SPELL_LIGHTNING_BOLT       =  1;
  public static final int SPELL_CURE_LIGHT           =  2;
  public static final int SPELL_FLASH                =  3;
  public static final int SPELL_SHIELD               =  4;
  public static final int SPELL_FIREBALL             =  5;
  public static final int SPELL_BURST                =  6;
  public static final int SPELL_POISON               =  7;
  public static final int SPELL_SANCTUARY            =  8;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  protected Entity caster;
  protected Entity target;
  protected int manacost;
  protected int spellType;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void setOwner(Entity e)  { caster = e;              }
  public int getSpellType()       { return spellType;        }
  static int getNumSpells()       { return TOTAL_NUM_SPELLS; }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  abstract boolean cast(String rem);
  abstract boolean itemCast(String rem, Item I, boolean first);

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public boolean isSkill() { return false;  }
  public boolean isSpell() { return true;   }
  
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////
  
  public Spell replicate()
  
  {
    Spell S = null;
    try { S = (Spell)clone(); }
    catch (Exception e) { System.out.println(e); }
    return S;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public Spell()

  {
    super();

    caster = null;
    level = 0;
    timesUsed = 0;

    prereqs = new ArrayList();
    levreqs = new ArrayList();
    reqSTR = 0;
    reqDEX = 0;
    reqCON = 0;
    reqINT = 0;
    reqWIS = 0;
    
    selfOut = "";
    targOut = "";
    grupOut = "";
    obsvOut = "";
  }
  
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static String getSpellName(int i)

  {
    switch(i)

    {
      case SPELL_GEM_MISSILE:     return "Gem Missile";
      case SPELL_LIGHTNING_BOLT:  return "Lightning Bolt";
      case SPELL_CURE_LIGHT:      return "Cure Light";
      case SPELL_FLASH:           return "Flash";
      case SPELL_SHIELD:          return "Shield";
      case SPELL_FIREBALL:        return "Fireball";
      case SPELL_BURST:           return "Burst";
      case SPELL_POISON:          return "Poison";
      case SPELL_SANCTUARY:       return "Sanctuary";
    }

    return "";
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void init(Entity Caster, int Level)

  {
    caster = Caster;
    level = Level;

    if (Caster != null)

    {
      mn = Caster.getName();
      Mn = Caster.getPName();
      my = Utility.possessive(mn);
      My = Utility.possessive(Mn);
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void spellOutput(boolean passive, boolean trainSpell)

  {
    caster.getRoom().setSkillRedirect(true);

    if (passive) caster.passiveOutput(target, selfOut, targOut, grupOut, obsvOut);
    else caster.combatOutput(target, selfOut, targOut, grupOut, obsvOut);

    if (trainSpell) train();

    caster.getRoom().setSkillRedirect(false);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public boolean train()

  {
    if (level >= 100) return false;

    int max = learnRate * ((level / 20) + 1);

    timesUsed++;

    if ((timesUsed % max) != 0) return false;

    level++;
    caster.fightEcho(name + " has improved!");

    return true;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public boolean trainRedirect()

  {
    caster.getRoom().setSkillRedirect(true);
    boolean result = train();
    caster.getRoom().setSkillRedirect(false);
    return result;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void tryItemUse(Item I)

  {
    selfOut = "You use " + I.getLName() + "#N.";
    targOut = Mn + " uses " + I.getLName() + "#N.";
    grupOut = Mn + " uses " + I.getLName() + "#N.";
    obsvOut = Mn + " uses " + I.getLName() + "#N.";

    spellOutput(true, false);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void failedItemUse()

  {
    selfOut = "Nothing seems to happen.";
    targOut = "Nothing seems to happen.";
    grupOut = "Nothing seems to happen.";
    obsvOut = "Nothing seems to happen.";

    spellOutput(true, false);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public static Spell createSpell(String sName, Entity ENT, int lev)

  {
    Ability A = null;
    Class C = null;

    sName = Utility.getProperClassName(sName);

    try

    {
      C = Class.forName(sName);
      A = (Ability) C.newInstance();
    }

    catch (Exception e) { return null; }
    catch (Throwable t) { return null; }

    try

    {
      Spell Sp = (Spell) A;
      Sp.init(ENT, lev);
      return Sp;
    }

    catch (Exception e) { return null; }
    catch (Throwable t) { return null; }
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public void writeExternal(ObjectOutput out)

  {
    try

    {
      out.writeObject("LEVEL");     out.writeObject(new Integer(level));
      out.writeObject("TIMESUSED"); out.writeObject(new Integer(timesUsed));
      out.writeObject("SPELL END");
    }

    catch (Exception e) { e.printStackTrace(); }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  public void readExternal(ObjectInput in)

  {
    try

    {
      String tag = "";

      while (!tag.equals("SPELL END"))

      {
        tag = (String)in.readObject();

        if (tag.equals("LEVEL"))            level = ((Integer)in.readObject()).intValue();
        else if (tag.equals("TIMESUSED"))   timesUsed = ((Integer)in.readObject()).intValue();
        else if (!tag.equals("SPELL END"))  in.readObject();
      }
    }

    catch (Exception e) { e.printStackTrace(); }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////
}