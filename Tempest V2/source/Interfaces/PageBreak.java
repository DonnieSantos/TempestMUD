import java.util.*;

public class PageBreak extends MudInterface

{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  private int currentIndex;
  private int maxIndex;
  private int numDisplayLines;
  private boolean haltOnLast;
  private boolean lastPageDone;
  private ArrayList stringList;

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public int viewMode()                { return UNDECIDED;        }
  public void echo(String s)           { utilityQueue.add(s);     }
  public void onDisconnect()           { myClient.popInterface(); }
  public void focusGained()            {                          }
  public void setHalting(boolean b)    { haltOnLast = b;          }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public PageBreak(Client C, String s)

  {
    super(C);
    haltOnLast = false;
    lastPageDone = false;
    stringList = new ArrayList();
    String[] list = s.split("\r\n");
    for (int i=0; i<list.length; i++) list[i] = "\r\n" + list[i];
    stringList.addAll(Arrays.asList(list));
    maxIndex = stringList.size();
    currentIndex = 0;

    if (getChar().getAnsiMode()) numDisplayLines = getChar().getScreenSize() - 7;
    else numDisplayLines = getChar().getScreenSize() - 2;

    displayNextPage();
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public void addOutput(String s)

  {
    if (!myClient.viewModeEnabled()) return;

    if (combatRedirect) putOutput(fightOutput, s);
    else if (skillRedirect) putOutput(skillOutput, s);
    else putOutput(normalOutput, s);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public void addFightOutput(String s)

  {

    if (!myClient.viewModeEnabled()) return;

    if (skillRedirect) putOutput(skillOutput, s);
    else if (normalRedirect) putOutput(normalOutput, s);
    else putOutput(fightOutput, s);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public void flushUtilityQueue()

  {
    output = "";

    while (!utilityQueue.isEmpty())
      output += utilityQueue.removeFirst().toString();
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public String getPrompt()

  {
    return "#N[#nEnter#N - Next Page] [#nP#N - Previous Page] [#nQ#N - Quit] :  ";
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public void handleOutput()

  {
    for (int i=0; i<QList.size(); i++)
      sendQueue(getQueue(i));

    QList.clear();

    if (!active) return;

    flushUtilityQueue();
    if (getChar().getAnsiMode() && output.length() > 0) output = "\r\n" + output;
    if (currentIndex == maxIndex) exit();
    else myClient.msg(output + "\r\n\n" + getPrompt());
    active = false;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public void handleInput()

  {
    if (!myClient.commandWaiting()) return;

    String input = clearWhiteSpace(myClient.getCommand());

    if (input.length() == 0)         { displayNextPage();           }
    if (input.equalsIgnoreCase("P")) { displayPreviousPage();       }
    if (input.equalsIgnoreCase("Q")) { flushUtilityQueue(); exit(); }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  private void displayNextPage()

  {
    int numLines;

    if (currentIndex + numDisplayLines <= maxIndex)
      numLines = numDisplayLines;
    else numLines = maxIndex - currentIndex;

    for (int i=0; i<numLines; i++)
      echo(stringList.get(currentIndex++).toString());
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  private void displayPreviousPage()

  {
    if (currentIndex - (2 * numDisplayLines) <= 0) currentIndex = 0;
    else currentIndex = currentIndex - (2 * numDisplayLines);
    if (lastPageDone) lastPageDone = false;

    displayNextPage();
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public void exit()

  {
    if (haltOnLast)
    if (!lastPageDone) {
      lastPageDone = true;
      myClient.msg(output + "\r\n\n" + getPrompt());
      return; }

    active = false;
    myClient.popInterface();

    String extra = "\r\n";
    String bottomSpace = "\r\n\n";
    String prompt = myClient.getInterface().tryPrompt();

    if (getChar().getAnsiMode()) {
      bottomSpace = "";
      extra = "\r\n#nPage break exited.#N"; }

    if (output.length() == 0) myClient.msg(extra + prompt);
    else myClient.msg(output + bottomSpace + prompt);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}