import java.io.*;
import java.util.*;

abstract class Blocker extends Utility

{
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static final int BLOCKER_NORMAL   = 0;
  public static final int BLOCKER_IMMORTAL = 1;
  public static final int BLOCKER_LEVEL    = 2;
  public static final int BLOCKER_CLASS    = 3;
  public static final int BLOCKER_CLAN     = 4;
  public static final int BLOCKER_RELIGION = 5;

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static int num = 0;
  private static String param = "";
  private static Clan clan = null;
  private static Religion religion = null;

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public Blocker() { }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static boolean tryPass(Entity ENT, Item I)

  {
    return tryPass(ENT, I.getBlockerType(), I.getBlockerParam());
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static boolean tryPass(Entity ENT, Entity E)

  {
    if ((!E.isPlayer()) && (!E.castMob().getFlag(Mobile.FLAG_BLOCKER))) return true;
    return tryPass(ENT, E.getBlockerType(), E.getBlockerParam());
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static String getErrorMsg(Item I)

  {
    return getErrorMsg(I.getBlockerType(), I, null);
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  public static String getErrorMsg(Entity E)

  {
    return getErrorMsg(E.getBlockerType(), null, E);
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static boolean tryPass(Entity ENT, int blockerType, String parameter)

  {
    param = parameter;

    switch(blockerType)

    {
      case BLOCKER_NORMAL:    return false;
      case BLOCKER_IMMORTAL:  return tryImmortal(ENT);
      case BLOCKER_LEVEL:     return tryLevel(ENT);
      case BLOCKER_CLASS:     return tryClass(ENT);
      case BLOCKER_CLAN:      return tryClan(ENT);
      case BLOCKER_RELIGION:  return tryReligion(ENT);
    }

    return true;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static String getErrorMsg(int blockerType, Item I, Entity E)

  {
    switch(blockerType)

    {
      case BLOCKER_NORMAL:    return errorNormal(I, E);
      case BLOCKER_IMMORTAL:  return errorImmortal();
      case BLOCKER_LEVEL:     return errorLevel();
      case BLOCKER_CLASS:     return errorClass();
      case BLOCKER_CLAN:      return errorClan();
      case BLOCKER_RELIGION:  return errorReligion();
    }

    return "You may pass.";
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static boolean tryImmortal(Entity ENT)

  {
    if ((param != null) && (param.length() > 0) && (number(param)))

    {
      num = Integer.parseInt(param);
      num = bound(num, 100, 110);
      if (ENT.getLevel() < num) return false;
      return true;
    }

    if (ENT.getLevel() < 100) return false;
    return true;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static boolean tryLevel(Entity ENT)

  {
    if ((param != null) && (param.length() > 0) && (number(param)))

    {
      num = Integer.parseInt(param);
      num = bound(num, 1, 99);
      if (ENT.getLevel() < num) return false;
      return true;
    }

    return true;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static boolean tryClass(Entity ENT)

  {
    if (param == null) return true;
    if (param.length() <= 0) return true;

    String s1 = param.toLowerCase();
    String s2 = ENT.getCharClass().toLowerCase();

    if (s1.indexOf(s2) != -1) return true;
    return false;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static boolean tryClan(Entity ENT)

  {
    clan = World.getClan(param);
    if (clan == null) return true;
    if (clan.searchMember(ENT.getName()) == -1) return false;
    return true;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static boolean tryReligion(Entity ENT)

  {
    religion = World.getReligion(param);
    if (religion == null) return true;
    if (religion.searchMember(ENT.getName()) == -1) return false;
    return true;
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static String errorNormal(Item I, Entity E)

  {
    if (I != null) return capitalLname(I.getLName()) + " #Nblocks your path.";
    if (E != null) return E.getName() + " #Nblocks your path.";
    return "Your path is blocked.";
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static String errorImmortal()

  {
    return "You are not godly enough to enter.";
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static String errorLevel()

  {
    return "You are not strong enough to enter.";
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static String errorClass()

  {
    return "Those of your profession may not enter here.";
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static String errorClan()

  {
    if (clan == null) return "Only clan members may pass.";
    return "Only members of " + clan.getName() + " #Nmay pass.";
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  private static String errorReligion()

  {
    if (religion == null) return "Only religious members may pass.";
    return "Only members of " + religion.getName() + " #Nmay pass.";
  }

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
}