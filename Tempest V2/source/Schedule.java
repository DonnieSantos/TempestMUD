import java.io.*;
import java.util.*;

class Schedule

{
  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  private long[] events;

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public static final int NUM_SCHEDULE_TYPES = 4;

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public static final int DEATH_BLOSSOM      = 0;
  public static final int LEAVE_MENTOR       = 1;
  public static final int FROZEN             = 2;
  public static final int MUTE               = 3;

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public long[] getEvents()       { return events; }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public Long[] getLongEvents()

  {
    Long[] eventList = new Long [NUM_SCHEDULE_TYPES];

    for (int i=0; i<NUM_SCHEDULE_TYPES; i++)
      eventList[i] = new Long(events[i]);

    return eventList;
  }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public Schedule()

  {
    events = new long [NUM_SCHEDULE_TYPES];

    for (int i=0; i<NUM_SCHEDULE_TYPES; i++)
      events[i] = 0;
  }
  
  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////
  
  public Schedule replicate()
  
  {
    long[] L = new long [NUM_SCHEDULE_TYPES];
    for (int i=0; i<NUM_SCHEDULE_TYPES; i++) L[i] = events[i];
    Schedule S = new Schedule();
    S.setEvents(L);
    return S;
  }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public void scheduleEvent(int ID, long minutes)

  {
    events[ID] = SystemTime.getGametime() + minutes;
  }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public void cancelEvent(int ID)

  {
    events[ID] = 0;
  }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  boolean checkEvent(int ID)

  {
    if (events[ID] == 0) return true;

    if (SystemTime.getGametime() >= events[ID])

    {
      events[ID] = 0;
      return true;
    }

    return false;
  }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  void setEvents(long[] Events)

  {
    int size = 0;

    if (Events.length < NUM_SCHEDULE_TYPES) size = Events.length;
    else size = NUM_SCHEDULE_TYPES;

    for (int i=0; i<size; i++)
      events[i] = Events[i];
  }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////

  public void setEvents(Long[] Events)

  {
    int size = 0;
    if (Events.length < NUM_SCHEDULE_TYPES) size = Events.length;
    else size = NUM_SCHEDULE_TYPES;

    for (int i=0; i<size; i++)
      events[i] = Events[i].longValue();
  }

  ////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////
}