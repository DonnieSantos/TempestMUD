import java.lang.StringBuffer;

public class GameInterface extends MudInterface

{
  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  private boolean nullCommand;

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public GameInterface(PlayerClient client, MudInterface previous)

  {
    super(client, previous);
  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public void handleInput()

  {
    if (commandQueue.size() == 0) return;
    String command = commandQueue.removeFirst();

    if (command.length() != 0)

    {
      CommandTable table = CommandTable.getInstance();
      EntityCommand C = table.get(first(command));
      if (C == null) C = table.get("invalid");
      Message message = C.execute(client.getEntityData(), last(command));
      if (message != null) echo(message.toString());
    }

    else nullCommand = true;
  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public void handleOutput()

  {
    if (nullCommand)

    {
      client.msg(getPrompt());
      nullCommand = false;
      return;
    }

    if (outputQueue.size() == 0) return;

    StringBuffer output = new StringBuffer();

    for (int i=0; i<outputQueue.size(); i++)

    {
      output.append("\r\n");
      output.append(outputQueue.get(i));
    }

    output.append("\r\n\r\n");
    output.append(getPrompt());
    client.msg(output.toString());
    outputQueue.clear();
  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public void receiveCommand(String commandString) throws Exception

  {
    commandString = commandString.trim();

    if (commandString.length() > 0)
      commandQueue.add(commandString);
    else nullCommand = true;
  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public void echo(String s)

  {
    outputQueue.add(s);
  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public void onDisconnect()

  {

  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public String getPrompt()

  {
    return "--> ";
  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public void focusGained()

  {
    CommandTable table = CommandTable.getInstance();
    EntityCommand C = table.get("look");
    C.execute(client.getEntityData(), "");
  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////

  public void exit()

  {

  }

  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////
}